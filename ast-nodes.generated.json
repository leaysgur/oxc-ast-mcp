{
  "AccessorProperty": "struct AccessorProperty {\n  pub span: oxc_span::Span,\n  pub type: AccessorPropertyType,\n  pub decorators: oxc_allocator::Vec<'a, Decorator<'a>>,\n  pub key: PropertyKey<'a>,\n  pub type_annotation: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n  pub value: Option<Expression<'a>>,\n  pub computed: bool,\n  pub static: bool,\n  pub override: bool,\n  pub definite: bool,\n  pub accessibility: Option<TSAccessibility>,\n}",
  "AccessorPropertyType": "enum AccessorPropertyType {\n  AccessorProperty,\n  TSAbstractAccessorProperty,\n}",
  "Argument": "enum Argument {\n  SpreadElement(oxc_allocator::Box<'a, SpreadElement<'a>>),\n  BooleanLiteral(Box<'a, BooleanLiteral>),\n  NullLiteral(Box<'a, NullLiteral>),\n  NumericLiteral(Box<'a, NumericLiteral<'a>>),\n  BigIntLiteral(Box<'a, BigIntLiteral<'a>>),\n  RegExpLiteral(Box<'a, RegExpLiteral<'a>>),\n  StringLiteral(Box<'a, StringLiteral<'a>>),\n  TemplateLiteral(Box<'a, TemplateLiteral<'a>>),\n  Identifier(Box<'a, IdentifierReference<'a>>),\n  MetaProperty(Box<'a, MetaProperty<'a>>),\n  Super(Box<'a, Super>),\n  ArrayExpression(Box<'a, ArrayExpression<'a>>),\n  ArrowFunctionExpression(Box<'a, ArrowFunctionExpression<'a>>),\n  AssignmentExpression(Box<'a, AssignmentExpression<'a>>),\n  AwaitExpression(Box<'a, AwaitExpression<'a>>),\n  BinaryExpression(Box<'a, BinaryExpression<'a>>),\n  CallExpression(Box<'a, CallExpression<'a>>),\n  ChainExpression(Box<'a, ChainExpression<'a>>),\n  ClassExpression(Box<'a, Class<'a>>),\n  ConditionalExpression(Box<'a, ConditionalExpression<'a>>),\n  FunctionExpression(Box<'a, Function<'a>>),\n  ImportExpression(Box<'a, ImportExpression<'a>>),\n  LogicalExpression(Box<'a, LogicalExpression<'a>>),\n  NewExpression(Box<'a, NewExpression<'a>>),\n  ObjectExpression(Box<'a, ObjectExpression<'a>>),\n  ParenthesizedExpression(Box<'a, ParenthesizedExpression<'a>>),\n  SequenceExpression(Box<'a, SequenceExpression<'a>>),\n  TaggedTemplateExpression(Box<'a, TaggedTemplateExpression<'a>>),\n  ThisExpression(Box<'a, ThisExpression>),\n  UnaryExpression(Box<'a, UnaryExpression<'a>>),\n  UpdateExpression(Box<'a, UpdateExpression<'a>>),\n  YieldExpression(Box<'a, YieldExpression<'a>>),\n  PrivateInExpression(Box<'a, PrivateInExpression<'a>>),\n  JSXElement(Box<'a, JSXElement<'a>>),\n  JSXFragment(Box<'a, JSXFragment<'a>>),\n  TSAsExpression(Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(Box<'a, TSSatisfiesExpression<'a>>),\n  TSTypeAssertion(Box<'a, TSTypeAssertion<'a>>),\n  TSNonNullExpression(Box<'a, TSNonNullExpression<'a>>),\n  TSInstantiationExpression(Box<'a, TSInstantiationExpression<'a>>),\n  V8IntrinsicExpression(Box<'a, V8IntrinsicExpression<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n}",
  "ArrayAssignmentTarget": "struct ArrayAssignmentTarget {\n  pub span: oxc_span::Span,\n  pub elements: oxc_allocator::Vec<'a, Option<AssignmentTargetMaybeDefault<'a>>>,\n  pub rest: Option<AssignmentTargetRest<'a>>,\n}",
  "ArrayExpression": "struct ArrayExpression {\n  pub span: oxc_span::Span,\n  pub elements: oxc_allocator::Vec<'a, ArrayExpressionElement<'a>>,\n}",
  "ArrayExpressionElement": "enum ArrayExpressionElement {\n  SpreadElement(oxc_allocator::Box<'a, SpreadElement<'a>>),\n  Elision(Elision),\n  BooleanLiteral(Box<'a, BooleanLiteral>),\n  NullLiteral(Box<'a, NullLiteral>),\n  NumericLiteral(Box<'a, NumericLiteral<'a>>),\n  BigIntLiteral(Box<'a, BigIntLiteral<'a>>),\n  RegExpLiteral(Box<'a, RegExpLiteral<'a>>),\n  StringLiteral(Box<'a, StringLiteral<'a>>),\n  TemplateLiteral(Box<'a, TemplateLiteral<'a>>),\n  Identifier(Box<'a, IdentifierReference<'a>>),\n  MetaProperty(Box<'a, MetaProperty<'a>>),\n  Super(Box<'a, Super>),\n  ArrayExpression(Box<'a, ArrayExpression<'a>>),\n  ArrowFunctionExpression(Box<'a, ArrowFunctionExpression<'a>>),\n  AssignmentExpression(Box<'a, AssignmentExpression<'a>>),\n  AwaitExpression(Box<'a, AwaitExpression<'a>>),\n  BinaryExpression(Box<'a, BinaryExpression<'a>>),\n  CallExpression(Box<'a, CallExpression<'a>>),\n  ChainExpression(Box<'a, ChainExpression<'a>>),\n  ClassExpression(Box<'a, Class<'a>>),\n  ConditionalExpression(Box<'a, ConditionalExpression<'a>>),\n  FunctionExpression(Box<'a, Function<'a>>),\n  ImportExpression(Box<'a, ImportExpression<'a>>),\n  LogicalExpression(Box<'a, LogicalExpression<'a>>),\n  NewExpression(Box<'a, NewExpression<'a>>),\n  ObjectExpression(Box<'a, ObjectExpression<'a>>),\n  ParenthesizedExpression(Box<'a, ParenthesizedExpression<'a>>),\n  SequenceExpression(Box<'a, SequenceExpression<'a>>),\n  TaggedTemplateExpression(Box<'a, TaggedTemplateExpression<'a>>),\n  ThisExpression(Box<'a, ThisExpression>),\n  UnaryExpression(Box<'a, UnaryExpression<'a>>),\n  UpdateExpression(Box<'a, UpdateExpression<'a>>),\n  YieldExpression(Box<'a, YieldExpression<'a>>),\n  PrivateInExpression(Box<'a, PrivateInExpression<'a>>),\n  JSXElement(Box<'a, JSXElement<'a>>),\n  JSXFragment(Box<'a, JSXFragment<'a>>),\n  TSAsExpression(Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(Box<'a, TSSatisfiesExpression<'a>>),\n  TSTypeAssertion(Box<'a, TSTypeAssertion<'a>>),\n  TSNonNullExpression(Box<'a, TSNonNullExpression<'a>>),\n  TSInstantiationExpression(Box<'a, TSInstantiationExpression<'a>>),\n  V8IntrinsicExpression(Box<'a, V8IntrinsicExpression<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n}",
  "ArrayPattern": "struct ArrayPattern {\n  pub span: oxc_span::Span,\n  pub elements: oxc_allocator::Vec<'a, Option<BindingPattern<'a>>>,\n  pub rest: Option<oxc_allocator::Box<'a, BindingRestElement<'a>>>,\n}",
  "ArrowFunctionExpression": "struct ArrowFunctionExpression {\n  pub span: oxc_span::Span,\n  pub expression: bool,\n  pub async: bool,\n  pub type_parameters: Option<oxc_allocator::Box<'a, TSTypeParameterDeclaration<'a>>>,\n  pub params: oxc_allocator::Box<'a, FormalParameters<'a>>,\n  pub return_type: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n  pub body: oxc_allocator::Box<'a, FunctionBody<'a>>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n  pub pure: bool,\n  pub pife: bool,\n}",
  "AssignmentExpression": "struct AssignmentExpression {\n  pub span: oxc_span::Span,\n  pub operator: oxc_syntax::operator::AssignmentOperator,\n  pub left: AssignmentTarget<'a>,\n  pub right: Expression<'a>,\n}",
  "AssignmentPattern": "struct AssignmentPattern {\n  pub span: oxc_span::Span,\n  pub left: BindingPattern<'a>,\n  pub right: Expression<'a>,\n}",
  "AssignmentTarget": "enum AssignmentTarget {\n  AssignmentTargetIdentifier(Box<'a, IdentifierReference<'a>>),\n  TSAsExpression(Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(Box<'a, TSSatisfiesExpression<'a>>),\n  TSNonNullExpression(Box<'a, TSNonNullExpression<'a>>),\n  TSTypeAssertion(Box<'a, TSTypeAssertion<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n  ArrayAssignmentTarget(Box<'a, ArrayAssignmentTarget<'a>>),\n  ObjectAssignmentTarget(Box<'a, ObjectAssignmentTarget<'a>>),\n}",
  "AssignmentTargetMaybeDefault": "enum AssignmentTargetMaybeDefault {\n  AssignmentTargetWithDefault(oxc_allocator::Box<'a, AssignmentTargetWithDefault<'a>>),\n  AssignmentTargetIdentifier(Box<'a, IdentifierReference<'a>>),\n  TSAsExpression(Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(Box<'a, TSSatisfiesExpression<'a>>),\n  TSNonNullExpression(Box<'a, TSNonNullExpression<'a>>),\n  TSTypeAssertion(Box<'a, TSTypeAssertion<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n  ArrayAssignmentTarget(Box<'a, ArrayAssignmentTarget<'a>>),\n  ObjectAssignmentTarget(Box<'a, ObjectAssignmentTarget<'a>>),\n}",
  "AssignmentTargetPattern": "enum AssignmentTargetPattern {\n  ArrayAssignmentTarget(oxc_allocator::Box<'a, ArrayAssignmentTarget<'a>>),\n  ObjectAssignmentTarget(oxc_allocator::Box<'a, ObjectAssignmentTarget<'a>>),\n}",
  "AssignmentTargetProperty": "enum AssignmentTargetProperty {\n  AssignmentTargetPropertyIdentifier(oxc_allocator::Box<'a, AssignmentTargetPropertyIdentifier<'a>>),\n  AssignmentTargetPropertyProperty(oxc_allocator::Box<'a, AssignmentTargetPropertyProperty<'a>>),\n}",
  "AssignmentTargetPropertyIdentifier": "struct AssignmentTargetPropertyIdentifier {\n  pub span: oxc_span::Span,\n  pub binding: IdentifierReference<'a>,\n  pub init: Option<Expression<'a>>,\n}",
  "AssignmentTargetPropertyProperty": "struct AssignmentTargetPropertyProperty {\n  pub span: oxc_span::Span,\n  pub name: PropertyKey<'a>,\n  pub binding: AssignmentTargetMaybeDefault<'a>,\n  pub computed: bool,\n}",
  "AssignmentTargetRest": "struct AssignmentTargetRest {\n  pub span: oxc_span::Span,\n  pub target: AssignmentTarget<'a>,\n}",
  "AssignmentTargetWithDefault": "struct AssignmentTargetWithDefault {\n  pub span: oxc_span::Span,\n  pub binding: AssignmentTarget<'a>,\n  pub init: Expression<'a>,\n}",
  "AwaitExpression": "struct AwaitExpression {\n  pub span: oxc_span::Span,\n  pub argument: Expression<'a>,\n}",
  "BigIntLiteral": "struct BigIntLiteral {\n  pub span: oxc_span::Span,\n  pub value: oxc_span::Atom<'a>,\n  pub raw: Option<oxc_span::Atom<'a>>,\n  pub base: oxc_syntax::number::BigintBase,\n}",
  "BinaryExpression": "struct BinaryExpression {\n  pub span: oxc_span::Span,\n  pub left: Expression<'a>,\n  pub operator: oxc_syntax::operator::BinaryOperator,\n  pub right: Expression<'a>,\n}",
  "BindingIdentifier": "struct BindingIdentifier {\n  pub span: oxc_span::Span,\n  pub name: oxc_span::Atom<'a>,\n  pub symbol_id: std::cell::Cell<Option<oxc_syntax::symbol::SymbolId>>,\n}",
  "BindingPattern": "struct BindingPattern {\n  pub kind: BindingPatternKind<'a>,\n  pub type_annotation: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n  pub optional: bool,\n}",
  "BindingPatternKind": "enum BindingPatternKind {\n  BindingIdentifier(oxc_allocator::Box<'a, BindingIdentifier<'a>>),\n  ObjectPattern(oxc_allocator::Box<'a, ObjectPattern<'a>>),\n  ArrayPattern(oxc_allocator::Box<'a, ArrayPattern<'a>>),\n  AssignmentPattern(oxc_allocator::Box<'a, AssignmentPattern<'a>>),\n}",
  "BindingProperty": "struct BindingProperty {\n  pub span: oxc_span::Span,\n  pub key: PropertyKey<'a>,\n  pub value: BindingPattern<'a>,\n  pub shorthand: bool,\n  pub computed: bool,\n}",
  "BindingRestElement": "struct BindingRestElement {\n  pub span: oxc_span::Span,\n  pub argument: BindingPattern<'a>,\n}",
  "BlockStatement": "struct BlockStatement {\n  pub span: oxc_span::Span,\n  pub body: oxc_allocator::Vec<'a, Statement<'a>>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "BooleanLiteral": "struct BooleanLiteral {\n  pub span: oxc_span::Span,\n  pub value: bool,\n}",
  "BreakStatement": "struct BreakStatement {\n  pub span: oxc_span::Span,\n  pub label: Option<LabelIdentifier<'a>>,\n}",
  "CallExpression": "struct CallExpression {\n  pub span: oxc_span::Span,\n  pub callee: Expression<'a>,\n  pub type_arguments: Option<oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>>,\n  pub arguments: oxc_allocator::Vec<'a, Argument<'a>>,\n  pub optional: bool,\n  pub pure: bool,\n}",
  "CatchClause": "struct CatchClause {\n  pub span: oxc_span::Span,\n  pub param: Option<CatchParameter<'a>>,\n  pub body: oxc_allocator::Box<'a, BlockStatement<'a>>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "CatchParameter": "struct CatchParameter {\n  pub span: oxc_span::Span,\n  pub pattern: BindingPattern<'a>,\n}",
  "ChainElement": "enum ChainElement {\n  CallExpression(oxc_allocator::Box<'a, CallExpression<'a>>),\n  TSNonNullExpression(oxc_allocator::Box<'a, TSNonNullExpression<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n}",
  "ChainExpression": "struct ChainExpression {\n  pub span: oxc_span::Span,\n  pub expression: ChainElement<'a>,\n}",
  "Class": "struct Class {\n  pub span: oxc_span::Span,\n  pub type: ClassType,\n  pub decorators: oxc_allocator::Vec<'a, Decorator<'a>>,\n  pub id: Option<BindingIdentifier<'a>>,\n  pub type_parameters: Option<oxc_allocator::Box<'a, TSTypeParameterDeclaration<'a>>>,\n  pub super_class: Option<Expression<'a>>,\n  pub super_type_arguments: Option<oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>>,\n  pub implements: oxc_allocator::Vec<'a, TSClassImplements<'a>>,\n  pub body: oxc_allocator::Box<'a, ClassBody<'a>>,\n  pub abstract: bool,\n  pub declare: bool,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "ClassBody": "struct ClassBody {\n  pub span: oxc_span::Span,\n  pub body: oxc_allocator::Vec<'a, ClassElement<'a>>,\n}",
  "ClassElement": "enum ClassElement {\n  StaticBlock(oxc_allocator::Box<'a, StaticBlock<'a>>),\n  MethodDefinition(oxc_allocator::Box<'a, MethodDefinition<'a>>),\n  PropertyDefinition(oxc_allocator::Box<'a, PropertyDefinition<'a>>),\n  AccessorProperty(oxc_allocator::Box<'a, AccessorProperty<'a>>),\n  TSIndexSignature(oxc_allocator::Box<'a, TSIndexSignature<'a>>),\n}",
  "ClassType": "enum ClassType {\n  ClassDeclaration,\n  ClassExpression,\n}",
  "Comment": "struct Comment {\n  pub span: oxc_span::Span,\n  pub attached_to: u32,\n  pub kind: CommentKind,\n  pub position: CommentPosition,\n  pub newlines: CommentNewlines,\n  pub content: CommentContent,\n}",
  "CommentContent": "enum CommentContent {\n  None,\n  Legal,\n  Jsdoc,\n  JsdocLegal,\n  Pure,\n  NoSideEffects,\n  Webpack,\n  Vite,\n  CoverageIgnore,\n}",
  "CommentKind": "enum CommentKind {\n  Line,\n  Block,\n}",
  "CommentNewlines": "struct CommentNewlines {\n\n}",
  "CommentPosition": "enum CommentPosition {\n  Leading,\n  Trailing,\n}",
  "CommentsRange": "struct CommentsRange {\n\n}",
  "ComputedMemberExpression": "struct ComputedMemberExpression {\n  pub span: oxc_span::Span,\n  pub object: Expression<'a>,\n  pub expression: Expression<'a>,\n  pub optional: bool,\n}",
  "ConditionalExpression": "struct ConditionalExpression {\n  pub span: oxc_span::Span,\n  pub test: Expression<'a>,\n  pub consequent: Expression<'a>,\n  pub alternate: Expression<'a>,\n}",
  "ContinueStatement": "struct ContinueStatement {\n  pub span: oxc_span::Span,\n  pub label: Option<LabelIdentifier<'a>>,\n}",
  "DebuggerStatement": "struct DebuggerStatement {\n  pub span: oxc_span::Span,\n}",
  "Declaration": "enum Declaration {\n  VariableDeclaration(oxc_allocator::Box<'a, VariableDeclaration<'a>>),\n  FunctionDeclaration(oxc_allocator::Box<'a, Function<'a>>),\n  ClassDeclaration(oxc_allocator::Box<'a, Class<'a>>),\n  TSTypeAliasDeclaration(oxc_allocator::Box<'a, TSTypeAliasDeclaration<'a>>),\n  TSInterfaceDeclaration(oxc_allocator::Box<'a, TSInterfaceDeclaration<'a>>),\n  TSEnumDeclaration(oxc_allocator::Box<'a, TSEnumDeclaration<'a>>),\n  TSModuleDeclaration(oxc_allocator::Box<'a, TSModuleDeclaration<'a>>),\n  TSImportEqualsDeclaration(oxc_allocator::Box<'a, TSImportEqualsDeclaration<'a>>),\n}",
  "Decorator": "struct Decorator {\n  pub span: oxc_span::Span,\n  pub expression: Expression<'a>,\n}",
  "Directive": "struct Directive {\n  pub span: oxc_span::Span,\n  pub expression: StringLiteral<'a>,\n  pub directive: oxc_span::Atom<'a>,\n}",
  "DoWhileStatement": "struct DoWhileStatement {\n  pub span: oxc_span::Span,\n  pub body: Statement<'a>,\n  pub test: Expression<'a>,\n}",
  "Elision": "struct Elision {\n  pub span: oxc_span::Span,\n}",
  "EmptyStatement": "struct EmptyStatement {\n  pub span: oxc_span::Span,\n}",
  "ExportAllDeclaration": "struct ExportAllDeclaration {\n  pub span: oxc_span::Span,\n  pub exported: Option<ModuleExportName<'a>>,\n  pub source: StringLiteral<'a>,\n  pub with_clause: Option<oxc_allocator::Box<'a, WithClause<'a>>>,\n  pub export_kind: ImportOrExportKind,\n}",
  "ExportDefaultDeclaration": "struct ExportDefaultDeclaration {\n  pub span: oxc_span::Span,\n  pub exported: ModuleExportName<'a>,\n  pub declaration: ExportDefaultDeclarationKind<'a>,\n}",
  "ExportDefaultDeclarationKind": "enum ExportDefaultDeclarationKind {\n  FunctionDeclaration(oxc_allocator::Box<'a, Function<'a>>),\n  ClassDeclaration(oxc_allocator::Box<'a, Class<'a>>),\n  TSInterfaceDeclaration(oxc_allocator::Box<'a, TSInterfaceDeclaration<'a>>),\n  BooleanLiteral(Box<'a, BooleanLiteral>),\n  NullLiteral(Box<'a, NullLiteral>),\n  NumericLiteral(Box<'a, NumericLiteral<'a>>),\n  BigIntLiteral(Box<'a, BigIntLiteral<'a>>),\n  RegExpLiteral(Box<'a, RegExpLiteral<'a>>),\n  StringLiteral(Box<'a, StringLiteral<'a>>),\n  TemplateLiteral(Box<'a, TemplateLiteral<'a>>),\n  Identifier(Box<'a, IdentifierReference<'a>>),\n  MetaProperty(Box<'a, MetaProperty<'a>>),\n  Super(Box<'a, Super>),\n  ArrayExpression(Box<'a, ArrayExpression<'a>>),\n  ArrowFunctionExpression(Box<'a, ArrowFunctionExpression<'a>>),\n  AssignmentExpression(Box<'a, AssignmentExpression<'a>>),\n  AwaitExpression(Box<'a, AwaitExpression<'a>>),\n  BinaryExpression(Box<'a, BinaryExpression<'a>>),\n  CallExpression(Box<'a, CallExpression<'a>>),\n  ChainExpression(Box<'a, ChainExpression<'a>>),\n  ClassExpression(Box<'a, Class<'a>>),\n  ConditionalExpression(Box<'a, ConditionalExpression<'a>>),\n  FunctionExpression(Box<'a, Function<'a>>),\n  ImportExpression(Box<'a, ImportExpression<'a>>),\n  LogicalExpression(Box<'a, LogicalExpression<'a>>),\n  NewExpression(Box<'a, NewExpression<'a>>),\n  ObjectExpression(Box<'a, ObjectExpression<'a>>),\n  ParenthesizedExpression(Box<'a, ParenthesizedExpression<'a>>),\n  SequenceExpression(Box<'a, SequenceExpression<'a>>),\n  TaggedTemplateExpression(Box<'a, TaggedTemplateExpression<'a>>),\n  ThisExpression(Box<'a, ThisExpression>),\n  UnaryExpression(Box<'a, UnaryExpression<'a>>),\n  UpdateExpression(Box<'a, UpdateExpression<'a>>),\n  YieldExpression(Box<'a, YieldExpression<'a>>),\n  PrivateInExpression(Box<'a, PrivateInExpression<'a>>),\n  JSXElement(Box<'a, JSXElement<'a>>),\n  JSXFragment(Box<'a, JSXFragment<'a>>),\n  TSAsExpression(Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(Box<'a, TSSatisfiesExpression<'a>>),\n  TSTypeAssertion(Box<'a, TSTypeAssertion<'a>>),\n  TSNonNullExpression(Box<'a, TSNonNullExpression<'a>>),\n  TSInstantiationExpression(Box<'a, TSInstantiationExpression<'a>>),\n  V8IntrinsicExpression(Box<'a, V8IntrinsicExpression<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n}",
  "ExportNamedDeclaration": "struct ExportNamedDeclaration {\n  pub span: oxc_span::Span,\n  pub declaration: Option<Declaration<'a>>,\n  pub specifiers: oxc_allocator::Vec<'a, ExportSpecifier<'a>>,\n  pub source: Option<StringLiteral<'a>>,\n  pub export_kind: ImportOrExportKind,\n  pub with_clause: Option<oxc_allocator::Box<'a, WithClause<'a>>>,\n}",
  "ExportSpecifier": "struct ExportSpecifier {\n  pub span: oxc_span::Span,\n  pub local: ModuleExportName<'a>,\n  pub exported: ModuleExportName<'a>,\n  pub export_kind: ImportOrExportKind,\n}",
  "Expression": "enum Expression {\n  BooleanLiteral(oxc_allocator::Box<'a, BooleanLiteral>),\n  NullLiteral(oxc_allocator::Box<'a, NullLiteral>),\n  NumericLiteral(oxc_allocator::Box<'a, NumericLiteral<'a>>),\n  BigIntLiteral(oxc_allocator::Box<'a, BigIntLiteral<'a>>),\n  RegExpLiteral(oxc_allocator::Box<'a, RegExpLiteral<'a>>),\n  StringLiteral(oxc_allocator::Box<'a, StringLiteral<'a>>),\n  TemplateLiteral(oxc_allocator::Box<'a, TemplateLiteral<'a>>),\n  Identifier(oxc_allocator::Box<'a, IdentifierReference<'a>>),\n  MetaProperty(oxc_allocator::Box<'a, MetaProperty<'a>>),\n  Super(oxc_allocator::Box<'a, Super>),\n  ArrayExpression(oxc_allocator::Box<'a, ArrayExpression<'a>>),\n  ArrowFunctionExpression(oxc_allocator::Box<'a, ArrowFunctionExpression<'a>>),\n  AssignmentExpression(oxc_allocator::Box<'a, AssignmentExpression<'a>>),\n  AwaitExpression(oxc_allocator::Box<'a, AwaitExpression<'a>>),\n  BinaryExpression(oxc_allocator::Box<'a, BinaryExpression<'a>>),\n  CallExpression(oxc_allocator::Box<'a, CallExpression<'a>>),\n  ChainExpression(oxc_allocator::Box<'a, ChainExpression<'a>>),\n  ClassExpression(oxc_allocator::Box<'a, Class<'a>>),\n  ConditionalExpression(oxc_allocator::Box<'a, ConditionalExpression<'a>>),\n  FunctionExpression(oxc_allocator::Box<'a, Function<'a>>),\n  ImportExpression(oxc_allocator::Box<'a, ImportExpression<'a>>),\n  LogicalExpression(oxc_allocator::Box<'a, LogicalExpression<'a>>),\n  NewExpression(oxc_allocator::Box<'a, NewExpression<'a>>),\n  ObjectExpression(oxc_allocator::Box<'a, ObjectExpression<'a>>),\n  ParenthesizedExpression(oxc_allocator::Box<'a, ParenthesizedExpression<'a>>),\n  SequenceExpression(oxc_allocator::Box<'a, SequenceExpression<'a>>),\n  TaggedTemplateExpression(oxc_allocator::Box<'a, TaggedTemplateExpression<'a>>),\n  ThisExpression(oxc_allocator::Box<'a, ThisExpression>),\n  UnaryExpression(oxc_allocator::Box<'a, UnaryExpression<'a>>),\n  UpdateExpression(oxc_allocator::Box<'a, UpdateExpression<'a>>),\n  YieldExpression(oxc_allocator::Box<'a, YieldExpression<'a>>),\n  PrivateInExpression(oxc_allocator::Box<'a, PrivateInExpression<'a>>),\n  JSXElement(oxc_allocator::Box<'a, JSXElement<'a>>),\n  JSXFragment(oxc_allocator::Box<'a, JSXFragment<'a>>),\n  TSAsExpression(oxc_allocator::Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(oxc_allocator::Box<'a, TSSatisfiesExpression<'a>>),\n  TSTypeAssertion(oxc_allocator::Box<'a, TSTypeAssertion<'a>>),\n  TSNonNullExpression(oxc_allocator::Box<'a, TSNonNullExpression<'a>>),\n  TSInstantiationExpression(oxc_allocator::Box<'a, TSInstantiationExpression<'a>>),\n  V8IntrinsicExpression(oxc_allocator::Box<'a, V8IntrinsicExpression<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n}",
  "ExpressionStatement": "struct ExpressionStatement {\n  pub span: oxc_span::Span,\n  pub expression: Expression<'a>,\n}",
  "ForInStatement": "struct ForInStatement {\n  pub span: oxc_span::Span,\n  pub left: ForStatementLeft<'a>,\n  pub right: Expression<'a>,\n  pub body: Statement<'a>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "FormalParameter": "struct FormalParameter {\n  pub span: oxc_span::Span,\n  pub decorators: oxc_allocator::Vec<'a, Decorator<'a>>,\n  pub pattern: BindingPattern<'a>,\n  pub accessibility: Option<TSAccessibility>,\n  pub readonly: bool,\n  pub override: bool,\n}",
  "FormalParameterKind": "enum FormalParameterKind {\n  FormalParameter,\n  UniqueFormalParameters,\n  ArrowFormalParameters,\n  Signature,\n}",
  "FormalParameters": "struct FormalParameters {\n  pub span: oxc_span::Span,\n  pub kind: FormalParameterKind,\n  pub items: oxc_allocator::Vec<'a, FormalParameter<'a>>,\n  pub rest: Option<oxc_allocator::Box<'a, BindingRestElement<'a>>>,\n}",
  "ForOfStatement": "struct ForOfStatement {\n  pub span: oxc_span::Span,\n  pub await: bool,\n  pub left: ForStatementLeft<'a>,\n  pub right: Expression<'a>,\n  pub body: Statement<'a>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "ForStatement": "struct ForStatement {\n  pub span: oxc_span::Span,\n  pub init: Option<ForStatementInit<'a>>,\n  pub test: Option<Expression<'a>>,\n  pub update: Option<Expression<'a>>,\n  pub body: Statement<'a>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "ForStatementInit": "enum ForStatementInit {\n  VariableDeclaration(oxc_allocator::Box<'a, VariableDeclaration<'a>>),\n  BooleanLiteral(Box<'a, BooleanLiteral>),\n  NullLiteral(Box<'a, NullLiteral>),\n  NumericLiteral(Box<'a, NumericLiteral<'a>>),\n  BigIntLiteral(Box<'a, BigIntLiteral<'a>>),\n  RegExpLiteral(Box<'a, RegExpLiteral<'a>>),\n  StringLiteral(Box<'a, StringLiteral<'a>>),\n  TemplateLiteral(Box<'a, TemplateLiteral<'a>>),\n  Identifier(Box<'a, IdentifierReference<'a>>),\n  MetaProperty(Box<'a, MetaProperty<'a>>),\n  Super(Box<'a, Super>),\n  ArrayExpression(Box<'a, ArrayExpression<'a>>),\n  ArrowFunctionExpression(Box<'a, ArrowFunctionExpression<'a>>),\n  AssignmentExpression(Box<'a, AssignmentExpression<'a>>),\n  AwaitExpression(Box<'a, AwaitExpression<'a>>),\n  BinaryExpression(Box<'a, BinaryExpression<'a>>),\n  CallExpression(Box<'a, CallExpression<'a>>),\n  ChainExpression(Box<'a, ChainExpression<'a>>),\n  ClassExpression(Box<'a, Class<'a>>),\n  ConditionalExpression(Box<'a, ConditionalExpression<'a>>),\n  FunctionExpression(Box<'a, Function<'a>>),\n  ImportExpression(Box<'a, ImportExpression<'a>>),\n  LogicalExpression(Box<'a, LogicalExpression<'a>>),\n  NewExpression(Box<'a, NewExpression<'a>>),\n  ObjectExpression(Box<'a, ObjectExpression<'a>>),\n  ParenthesizedExpression(Box<'a, ParenthesizedExpression<'a>>),\n  SequenceExpression(Box<'a, SequenceExpression<'a>>),\n  TaggedTemplateExpression(Box<'a, TaggedTemplateExpression<'a>>),\n  ThisExpression(Box<'a, ThisExpression>),\n  UnaryExpression(Box<'a, UnaryExpression<'a>>),\n  UpdateExpression(Box<'a, UpdateExpression<'a>>),\n  YieldExpression(Box<'a, YieldExpression<'a>>),\n  PrivateInExpression(Box<'a, PrivateInExpression<'a>>),\n  JSXElement(Box<'a, JSXElement<'a>>),\n  JSXFragment(Box<'a, JSXFragment<'a>>),\n  TSAsExpression(Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(Box<'a, TSSatisfiesExpression<'a>>),\n  TSTypeAssertion(Box<'a, TSTypeAssertion<'a>>),\n  TSNonNullExpression(Box<'a, TSNonNullExpression<'a>>),\n  TSInstantiationExpression(Box<'a, TSInstantiationExpression<'a>>),\n  V8IntrinsicExpression(Box<'a, V8IntrinsicExpression<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n}",
  "ForStatementLeft": "enum ForStatementLeft {\n  VariableDeclaration(oxc_allocator::Box<'a, VariableDeclaration<'a>>),\n  AssignmentTargetIdentifier(Box<'a, IdentifierReference<'a>>),\n  TSAsExpression(Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(Box<'a, TSSatisfiesExpression<'a>>),\n  TSNonNullExpression(Box<'a, TSNonNullExpression<'a>>),\n  TSTypeAssertion(Box<'a, TSTypeAssertion<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n  ArrayAssignmentTarget(Box<'a, ArrayAssignmentTarget<'a>>),\n  ObjectAssignmentTarget(Box<'a, ObjectAssignmentTarget<'a>>),\n}",
  "Function": "struct Function {\n  pub span: oxc_span::Span,\n  pub type: FunctionType,\n  pub id: Option<BindingIdentifier<'a>>,\n  pub generator: bool,\n  pub async: bool,\n  pub declare: bool,\n  pub type_parameters: Option<oxc_allocator::Box<'a, TSTypeParameterDeclaration<'a>>>,\n  pub this_param: Option<oxc_allocator::Box<'a, TSThisParameter<'a>>>,\n  pub params: oxc_allocator::Box<'a, FormalParameters<'a>>,\n  pub return_type: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n  pub body: Option<oxc_allocator::Box<'a, FunctionBody<'a>>>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n  pub pure: bool,\n  pub pife: bool,\n}",
  "FunctionBody": "struct FunctionBody {\n  pub span: oxc_span::Span,\n  pub directives: oxc_allocator::Vec<'a, Directive<'a>>,\n  pub statements: oxc_allocator::Vec<'a, Statement<'a>>,\n}",
  "FunctionType": "enum FunctionType {\n  FunctionDeclaration,\n  FunctionExpression,\n  TSDeclareFunction,\n  TSEmptyBodyFunctionExpression,\n}",
  "Hashbang": "struct Hashbang {\n  pub span: oxc_span::Span,\n  pub value: oxc_span::Atom<'a>,\n}",
  "IdentifierName": "struct IdentifierName {\n  pub span: oxc_span::Span,\n  pub name: oxc_span::Atom<'a>,\n}",
  "IdentifierReference": "struct IdentifierReference {\n  pub span: oxc_span::Span,\n  pub name: oxc_span::Atom<'a>,\n  pub reference_id: std::cell::Cell<Option<oxc_syntax::reference::ReferenceId>>,\n}",
  "IfStatement": "struct IfStatement {\n  pub span: oxc_span::Span,\n  pub test: Expression<'a>,\n  pub consequent: Statement<'a>,\n  pub alternate: Option<Statement<'a>>,\n}",
  "ImportAttribute": "struct ImportAttribute {\n  pub span: oxc_span::Span,\n  pub key: ImportAttributeKey<'a>,\n  pub value: StringLiteral<'a>,\n}",
  "ImportAttributeKey": "enum ImportAttributeKey {\n  Identifier(IdentifierName<'a>),\n  StringLiteral(StringLiteral<'a>),\n}",
  "ImportDeclaration": "struct ImportDeclaration {\n  pub span: oxc_span::Span,\n  pub specifiers: Option<oxc_allocator::Vec<'a, ImportDeclarationSpecifier<'a>>>,\n  pub source: StringLiteral<'a>,\n  pub phase: Option<ImportPhase>,\n  pub with_clause: Option<oxc_allocator::Box<'a, WithClause<'a>>>,\n  pub import_kind: ImportOrExportKind,\n}",
  "ImportDeclarationSpecifier": "enum ImportDeclarationSpecifier {\n  ImportSpecifier(oxc_allocator::Box<'a, ImportSpecifier<'a>>),\n  ImportDefaultSpecifier(oxc_allocator::Box<'a, ImportDefaultSpecifier<'a>>),\n  ImportNamespaceSpecifier(oxc_allocator::Box<'a, ImportNamespaceSpecifier<'a>>),\n}",
  "ImportDefaultSpecifier": "struct ImportDefaultSpecifier {\n  pub span: oxc_span::Span,\n  pub local: BindingIdentifier<'a>,\n}",
  "ImportExpression": "struct ImportExpression {\n  pub span: oxc_span::Span,\n  pub source: Expression<'a>,\n  pub options: Option<Expression<'a>>,\n  pub phase: Option<ImportPhase>,\n}",
  "ImportNamespaceSpecifier": "struct ImportNamespaceSpecifier {\n  pub span: oxc_span::Span,\n  pub local: BindingIdentifier<'a>,\n}",
  "ImportOrExportKind": "enum ImportOrExportKind {\n  Value,\n  Type,\n}",
  "ImportPhase": "enum ImportPhase {\n  Source,\n  Defer,\n}",
  "ImportSpecifier": "struct ImportSpecifier {\n  pub span: oxc_span::Span,\n  pub imported: ModuleExportName<'a>,\n  pub local: BindingIdentifier<'a>,\n  pub import_kind: ImportOrExportKind,\n}",
  "JSDocNonNullableType": "struct JSDocNonNullableType {\n  pub span: oxc_span::Span,\n  pub type_annotation: TSType<'a>,\n  pub postfix: bool,\n}",
  "JSDocNullableType": "struct JSDocNullableType {\n  pub span: oxc_span::Span,\n  pub type_annotation: TSType<'a>,\n  pub postfix: bool,\n}",
  "JSDocUnknownType": "struct JSDocUnknownType {\n  pub span: oxc_span::Span,\n}",
  "JSXAttribute": "struct JSXAttribute {\n  pub span: oxc_span::Span,\n  pub name: JSXAttributeName<'a>,\n  pub value: Option<JSXAttributeValue<'a>>,\n}",
  "JSXAttributeItem": "enum JSXAttributeItem {\n  Attribute(oxc_allocator::Box<'a, JSXAttribute<'a>>),\n  SpreadAttribute(oxc_allocator::Box<'a, JSXSpreadAttribute<'a>>),\n}",
  "JSXAttributeName": "enum JSXAttributeName {\n  Identifier(oxc_allocator::Box<'a, JSXIdentifier<'a>>),\n  NamespacedName(oxc_allocator::Box<'a, JSXNamespacedName<'a>>),\n}",
  "JSXAttributeValue": "enum JSXAttributeValue {\n  StringLiteral(oxc_allocator::Box<'a, StringLiteral<'a>>),\n  ExpressionContainer(oxc_allocator::Box<'a, JSXExpressionContainer<'a>>),\n  Element(oxc_allocator::Box<'a, JSXElement<'a>>),\n  Fragment(oxc_allocator::Box<'a, JSXFragment<'a>>),\n}",
  "JSXChild": "enum JSXChild {\n  Text(oxc_allocator::Box<'a, JSXText<'a>>),\n  Element(oxc_allocator::Box<'a, JSXElement<'a>>),\n  Fragment(oxc_allocator::Box<'a, JSXFragment<'a>>),\n  ExpressionContainer(oxc_allocator::Box<'a, JSXExpressionContainer<'a>>),\n  Spread(oxc_allocator::Box<'a, JSXSpreadChild<'a>>),\n}",
  "JSXClosingElement": "struct JSXClosingElement {\n  pub span: oxc_span::Span,\n  pub name: JSXElementName<'a>,\n}",
  "JSXClosingFragment": "struct JSXClosingFragment {\n  pub span: oxc_span::Span,\n}",
  "JSXElement": "struct JSXElement {\n  pub span: oxc_span::Span,\n  pub opening_element: oxc_allocator::Box<'a, JSXOpeningElement<'a>>,\n  pub children: oxc_allocator::Vec<'a, JSXChild<'a>>,\n  pub closing_element: Option<oxc_allocator::Box<'a, JSXClosingElement<'a>>>,\n}",
  "JSXElementName": "enum JSXElementName {\n  Identifier(oxc_allocator::Box<'a, JSXIdentifier<'a>>),\n  IdentifierReference(oxc_allocator::Box<'a, IdentifierReference<'a>>),\n  NamespacedName(oxc_allocator::Box<'a, JSXNamespacedName<'a>>),\n  MemberExpression(oxc_allocator::Box<'a, JSXMemberExpression<'a>>),\n  ThisExpression(oxc_allocator::Box<'a, ThisExpression>),\n}",
  "JSXEmptyExpression": "struct JSXEmptyExpression {\n  pub span: oxc_span::Span,\n}",
  "JSXExpression": "enum JSXExpression {\n  EmptyExpression(JSXEmptyExpression),\n  BooleanLiteral(Box<'a, BooleanLiteral>),\n  NullLiteral(Box<'a, NullLiteral>),\n  NumericLiteral(Box<'a, NumericLiteral<'a>>),\n  BigIntLiteral(Box<'a, BigIntLiteral<'a>>),\n  RegExpLiteral(Box<'a, RegExpLiteral<'a>>),\n  StringLiteral(Box<'a, StringLiteral<'a>>),\n  TemplateLiteral(Box<'a, TemplateLiteral<'a>>),\n  Identifier(Box<'a, IdentifierReference<'a>>),\n  MetaProperty(Box<'a, MetaProperty<'a>>),\n  Super(Box<'a, Super>),\n  ArrayExpression(Box<'a, ArrayExpression<'a>>),\n  ArrowFunctionExpression(Box<'a, ArrowFunctionExpression<'a>>),\n  AssignmentExpression(Box<'a, AssignmentExpression<'a>>),\n  AwaitExpression(Box<'a, AwaitExpression<'a>>),\n  BinaryExpression(Box<'a, BinaryExpression<'a>>),\n  CallExpression(Box<'a, CallExpression<'a>>),\n  ChainExpression(Box<'a, ChainExpression<'a>>),\n  ClassExpression(Box<'a, Class<'a>>),\n  ConditionalExpression(Box<'a, ConditionalExpression<'a>>),\n  FunctionExpression(Box<'a, Function<'a>>),\n  ImportExpression(Box<'a, ImportExpression<'a>>),\n  LogicalExpression(Box<'a, LogicalExpression<'a>>),\n  NewExpression(Box<'a, NewExpression<'a>>),\n  ObjectExpression(Box<'a, ObjectExpression<'a>>),\n  ParenthesizedExpression(Box<'a, ParenthesizedExpression<'a>>),\n  SequenceExpression(Box<'a, SequenceExpression<'a>>),\n  TaggedTemplateExpression(Box<'a, TaggedTemplateExpression<'a>>),\n  ThisExpression(Box<'a, ThisExpression>),\n  UnaryExpression(Box<'a, UnaryExpression<'a>>),\n  UpdateExpression(Box<'a, UpdateExpression<'a>>),\n  YieldExpression(Box<'a, YieldExpression<'a>>),\n  PrivateInExpression(Box<'a, PrivateInExpression<'a>>),\n  JSXElement(Box<'a, JSXElement<'a>>),\n  JSXFragment(Box<'a, JSXFragment<'a>>),\n  TSAsExpression(Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(Box<'a, TSSatisfiesExpression<'a>>),\n  TSTypeAssertion(Box<'a, TSTypeAssertion<'a>>),\n  TSNonNullExpression(Box<'a, TSNonNullExpression<'a>>),\n  TSInstantiationExpression(Box<'a, TSInstantiationExpression<'a>>),\n  V8IntrinsicExpression(Box<'a, V8IntrinsicExpression<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n}",
  "JSXExpressionContainer": "struct JSXExpressionContainer {\n  pub span: oxc_span::Span,\n  pub expression: JSXExpression<'a>,\n}",
  "JSXFragment": "struct JSXFragment {\n  pub span: oxc_span::Span,\n  pub opening_fragment: JSXOpeningFragment,\n  pub children: oxc_allocator::Vec<'a, JSXChild<'a>>,\n  pub closing_fragment: JSXClosingFragment,\n}",
  "JSXIdentifier": "struct JSXIdentifier {\n  pub span: oxc_span::Span,\n  pub name: oxc_span::Atom<'a>,\n}",
  "JSXMemberExpression": "struct JSXMemberExpression {\n  pub span: oxc_span::Span,\n  pub object: JSXMemberExpressionObject<'a>,\n  pub property: JSXIdentifier<'a>,\n}",
  "JSXMemberExpressionObject": "enum JSXMemberExpressionObject {\n  IdentifierReference(oxc_allocator::Box<'a, IdentifierReference<'a>>),\n  MemberExpression(oxc_allocator::Box<'a, JSXMemberExpression<'a>>),\n  ThisExpression(oxc_allocator::Box<'a, ThisExpression>),\n}",
  "JSXNamespacedName": "struct JSXNamespacedName {\n  pub span: oxc_span::Span,\n  pub namespace: JSXIdentifier<'a>,\n  pub name: JSXIdentifier<'a>,\n}",
  "JSXOpeningElement": "struct JSXOpeningElement {\n  pub span: oxc_span::Span,\n  pub name: JSXElementName<'a>,\n  pub type_arguments: Option<oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>>,\n  pub attributes: oxc_allocator::Vec<'a, JSXAttributeItem<'a>>,\n}",
  "JSXOpeningFragment": "struct JSXOpeningFragment {\n  pub span: oxc_span::Span,\n}",
  "JSXSpreadAttribute": "struct JSXSpreadAttribute {\n  pub span: oxc_span::Span,\n  pub argument: Expression<'a>,\n}",
  "JSXSpreadChild": "struct JSXSpreadChild {\n  pub span: oxc_span::Span,\n  pub expression: Expression<'a>,\n}",
  "JSXText": "struct JSXText {\n  pub span: oxc_span::Span,\n  pub value: oxc_span::Atom<'a>,\n  pub raw: Option<oxc_span::Atom<'a>>,\n}",
  "LabeledStatement": "struct LabeledStatement {\n  pub span: oxc_span::Span,\n  pub label: LabelIdentifier<'a>,\n  pub body: Statement<'a>,\n}",
  "LabelIdentifier": "struct LabelIdentifier {\n  pub span: oxc_span::Span,\n  pub name: oxc_span::Atom<'a>,\n}",
  "LogicalExpression": "struct LogicalExpression {\n  pub span: oxc_span::Span,\n  pub left: Expression<'a>,\n  pub operator: oxc_syntax::operator::LogicalOperator,\n  pub right: Expression<'a>,\n}",
  "MemberExpression": "enum MemberExpression {\n  ComputedMemberExpression(oxc_allocator::Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(oxc_allocator::Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(oxc_allocator::Box<'a, PrivateFieldExpression<'a>>),\n}",
  "MemberExpressionKind": "enum MemberExpressionKind {\n  Static(&'a StaticMemberExpression<'a>),\n  Computed(&'a ComputedMemberExpression<'a>),\n  PrivateField(&'a PrivateFieldExpression<'a>),\n}",
  "MetaProperty": "struct MetaProperty {\n  pub span: oxc_span::Span,\n  pub meta: IdentifierName<'a>,\n  pub property: IdentifierName<'a>,\n}",
  "MethodDefinition": "struct MethodDefinition {\n  pub span: oxc_span::Span,\n  pub type: MethodDefinitionType,\n  pub decorators: oxc_allocator::Vec<'a, Decorator<'a>>,\n  pub key: PropertyKey<'a>,\n  pub value: oxc_allocator::Box<'a, Function<'a>>,\n  pub kind: MethodDefinitionKind,\n  pub computed: bool,\n  pub static: bool,\n  pub override: bool,\n  pub optional: bool,\n  pub accessibility: Option<TSAccessibility>,\n}",
  "MethodDefinitionKind": "enum MethodDefinitionKind {\n  Constructor,\n  Method,\n  Get,\n  Set,\n}",
  "MethodDefinitionType": "enum MethodDefinitionType {\n  MethodDefinition,\n  TSAbstractMethodDefinition,\n}",
  "ModuleDeclaration": "enum ModuleDeclaration {\n  ImportDeclaration(oxc_allocator::Box<'a, ImportDeclaration<'a>>),\n  ExportAllDeclaration(oxc_allocator::Box<'a, ExportAllDeclaration<'a>>),\n  ExportDefaultDeclaration(oxc_allocator::Box<'a, ExportDefaultDeclaration<'a>>),\n  ExportNamedDeclaration(oxc_allocator::Box<'a, ExportNamedDeclaration<'a>>),\n  TSExportAssignment(oxc_allocator::Box<'a, TSExportAssignment<'a>>),\n  TSNamespaceExportDeclaration(oxc_allocator::Box<'a, TSNamespaceExportDeclaration<'a>>),\n}",
  "ModuleDeclarationKind": "enum ModuleDeclarationKind {\n  Import(&'a ImportDeclaration<'a>),\n  ExportAll(&'a ExportAllDeclaration<'a>),\n  ExportNamed(&'a ExportNamedDeclaration<'a>),\n  ExportDefault(&'a ExportDefaultDeclaration<'a>),\n  TSExportAssignment(&'a TSExportAssignment<'a>),\n  TSNamespaceExport(&'a TSNamespaceExportDeclaration<'a>),\n}",
  "ModuleExportName": "enum ModuleExportName {\n  IdentifierName(IdentifierName<'a>),\n  IdentifierReference(IdentifierReference<'a>),\n  StringLiteral(StringLiteral<'a>),\n}",
  "NewExpression": "struct NewExpression {\n  pub span: oxc_span::Span,\n  pub callee: Expression<'a>,\n  pub type_arguments: Option<oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>>,\n  pub arguments: oxc_allocator::Vec<'a, Argument<'a>>,\n  pub pure: bool,\n}",
  "NullLiteral": "struct NullLiteral {\n  pub span: oxc_span::Span,\n}",
  "NumericLiteral": "struct NumericLiteral {\n  pub span: oxc_span::Span,\n  pub value: f64,\n  pub raw: Option<oxc_span::Atom<'a>>,\n  pub base: oxc_syntax::number::NumberBase,\n}",
  "ObjectAssignmentTarget": "struct ObjectAssignmentTarget {\n  pub span: oxc_span::Span,\n  pub properties: oxc_allocator::Vec<'a, AssignmentTargetProperty<'a>>,\n  pub rest: Option<AssignmentTargetRest<'a>>,\n}",
  "ObjectExpression": "struct ObjectExpression {\n  pub span: oxc_span::Span,\n  pub properties: oxc_allocator::Vec<'a, ObjectPropertyKind<'a>>,\n}",
  "ObjectPattern": "struct ObjectPattern {\n  pub span: oxc_span::Span,\n  pub properties: oxc_allocator::Vec<'a, BindingProperty<'a>>,\n  pub rest: Option<oxc_allocator::Box<'a, BindingRestElement<'a>>>,\n}",
  "ObjectProperty": "struct ObjectProperty {\n  pub span: oxc_span::Span,\n  pub kind: PropertyKind,\n  pub key: PropertyKey<'a>,\n  pub value: Expression<'a>,\n  pub method: bool,\n  pub shorthand: bool,\n  pub computed: bool,\n}",
  "ObjectPropertyKind": "enum ObjectPropertyKind {\n  ObjectProperty(oxc_allocator::Box<'a, ObjectProperty<'a>>),\n  SpreadProperty(oxc_allocator::Box<'a, SpreadElement<'a>>),\n}",
  "ParenthesizedExpression": "struct ParenthesizedExpression {\n  pub span: oxc_span::Span,\n  pub expression: Expression<'a>,\n}",
  "PrivateFieldExpression": "struct PrivateFieldExpression {\n  pub span: oxc_span::Span,\n  pub object: Expression<'a>,\n  pub field: PrivateIdentifier<'a>,\n  pub optional: bool,\n}",
  "PrivateIdentifier": "struct PrivateIdentifier {\n  pub span: oxc_span::Span,\n  pub name: oxc_span::Atom<'a>,\n}",
  "PrivateInExpression": "struct PrivateInExpression {\n  pub span: oxc_span::Span,\n  pub left: PrivateIdentifier<'a>,\n  pub right: Expression<'a>,\n}",
  "Program": "struct Program {\n  pub span: oxc_span::Span,\n  pub source_type: oxc_span::SourceType,\n  pub source_text: &'a str,\n  pub comments: oxc_allocator::Vec<'a, Comment>,\n  pub hashbang: Option<Hashbang<'a>>,\n  pub directives: oxc_allocator::Vec<'a, Directive<'a>>,\n  pub body: oxc_allocator::Vec<'a, Statement<'a>>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "PropertyDefinition": "struct PropertyDefinition {\n  pub span: oxc_span::Span,\n  pub type: PropertyDefinitionType,\n  pub decorators: oxc_allocator::Vec<'a, Decorator<'a>>,\n  pub key: PropertyKey<'a>,\n  pub type_annotation: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n  pub value: Option<Expression<'a>>,\n  pub computed: bool,\n  pub static: bool,\n  pub declare: bool,\n  pub override: bool,\n  pub optional: bool,\n  pub definite: bool,\n  pub readonly: bool,\n  pub accessibility: Option<TSAccessibility>,\n}",
  "PropertyDefinitionType": "enum PropertyDefinitionType {\n  PropertyDefinition,\n  TSAbstractPropertyDefinition,\n}",
  "PropertyKey": "enum PropertyKey {\n  StaticIdentifier(oxc_allocator::Box<'a, IdentifierName<'a>>),\n  PrivateIdentifier(oxc_allocator::Box<'a, PrivateIdentifier<'a>>),\n  BooleanLiteral(Box<'a, BooleanLiteral>),\n  NullLiteral(Box<'a, NullLiteral>),\n  NumericLiteral(Box<'a, NumericLiteral<'a>>),\n  BigIntLiteral(Box<'a, BigIntLiteral<'a>>),\n  RegExpLiteral(Box<'a, RegExpLiteral<'a>>),\n  StringLiteral(Box<'a, StringLiteral<'a>>),\n  TemplateLiteral(Box<'a, TemplateLiteral<'a>>),\n  Identifier(Box<'a, IdentifierReference<'a>>),\n  MetaProperty(Box<'a, MetaProperty<'a>>),\n  Super(Box<'a, Super>),\n  ArrayExpression(Box<'a, ArrayExpression<'a>>),\n  ArrowFunctionExpression(Box<'a, ArrowFunctionExpression<'a>>),\n  AssignmentExpression(Box<'a, AssignmentExpression<'a>>),\n  AwaitExpression(Box<'a, AwaitExpression<'a>>),\n  BinaryExpression(Box<'a, BinaryExpression<'a>>),\n  CallExpression(Box<'a, CallExpression<'a>>),\n  ChainExpression(Box<'a, ChainExpression<'a>>),\n  ClassExpression(Box<'a, Class<'a>>),\n  ConditionalExpression(Box<'a, ConditionalExpression<'a>>),\n  FunctionExpression(Box<'a, Function<'a>>),\n  ImportExpression(Box<'a, ImportExpression<'a>>),\n  LogicalExpression(Box<'a, LogicalExpression<'a>>),\n  NewExpression(Box<'a, NewExpression<'a>>),\n  ObjectExpression(Box<'a, ObjectExpression<'a>>),\n  ParenthesizedExpression(Box<'a, ParenthesizedExpression<'a>>),\n  SequenceExpression(Box<'a, SequenceExpression<'a>>),\n  TaggedTemplateExpression(Box<'a, TaggedTemplateExpression<'a>>),\n  ThisExpression(Box<'a, ThisExpression>),\n  UnaryExpression(Box<'a, UnaryExpression<'a>>),\n  UpdateExpression(Box<'a, UpdateExpression<'a>>),\n  YieldExpression(Box<'a, YieldExpression<'a>>),\n  PrivateInExpression(Box<'a, PrivateInExpression<'a>>),\n  JSXElement(Box<'a, JSXElement<'a>>),\n  JSXFragment(Box<'a, JSXFragment<'a>>),\n  TSAsExpression(Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(Box<'a, TSSatisfiesExpression<'a>>),\n  TSTypeAssertion(Box<'a, TSTypeAssertion<'a>>),\n  TSNonNullExpression(Box<'a, TSNonNullExpression<'a>>),\n  TSInstantiationExpression(Box<'a, TSInstantiationExpression<'a>>),\n  V8IntrinsicExpression(Box<'a, V8IntrinsicExpression<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n}",
  "PropertyKeyKind": "enum PropertyKeyKind {\n  Static(&'a IdentifierName<'a>),\n  Private(&'a PrivateIdentifier<'a>),\n}",
  "PropertyKind": "enum PropertyKind {\n  Init,\n  Get,\n  Set,\n}",
  "RegExp": "struct RegExp {\n  pub pattern: RegExpPattern<'a>,\n  pub flags: RegExpFlags,\n}",
  "RegExpFlags": "struct RegExpFlags {\n\n}",
  "RegExpLiteral": "struct RegExpLiteral {\n  pub span: oxc_span::Span,\n  pub regex: RegExp<'a>,\n  pub raw: Option<oxc_span::Atom<'a>>,\n}",
  "RegExpPattern": "struct RegExpPattern {\n  pub text: oxc_span::Atom<'a>,\n  pub pattern: Option<oxc_allocator::Box<'a, oxc_regular_expression::ast::Pattern<'a>>>,\n}",
  "ReturnStatement": "struct ReturnStatement {\n  pub span: oxc_span::Span,\n  pub argument: Option<Expression<'a>>,\n}",
  "SequenceExpression": "struct SequenceExpression {\n  pub span: oxc_span::Span,\n  pub expressions: oxc_allocator::Vec<'a, Expression<'a>>,\n}",
  "SimpleAssignmentTarget": "enum SimpleAssignmentTarget {\n  AssignmentTargetIdentifier(oxc_allocator::Box<'a, IdentifierReference<'a>>),\n  TSAsExpression(oxc_allocator::Box<'a, TSAsExpression<'a>>),\n  TSSatisfiesExpression(oxc_allocator::Box<'a, TSSatisfiesExpression<'a>>),\n  TSNonNullExpression(oxc_allocator::Box<'a, TSNonNullExpression<'a>>),\n  TSTypeAssertion(oxc_allocator::Box<'a, TSTypeAssertion<'a>>),\n  ComputedMemberExpression(Box<'a, ComputedMemberExpression<'a>>),\n  StaticMemberExpression(Box<'a, StaticMemberExpression<'a>>),\n  PrivateFieldExpression(Box<'a, PrivateFieldExpression<'a>>),\n}",
  "SpreadElement": "struct SpreadElement {\n  pub span: oxc_span::Span,\n  pub argument: Expression<'a>,\n}",
  "Statement": "enum Statement {\n  BlockStatement(oxc_allocator::Box<'a, BlockStatement<'a>>),\n  BreakStatement(oxc_allocator::Box<'a, BreakStatement<'a>>),\n  ContinueStatement(oxc_allocator::Box<'a, ContinueStatement<'a>>),\n  DebuggerStatement(oxc_allocator::Box<'a, DebuggerStatement>),\n  DoWhileStatement(oxc_allocator::Box<'a, DoWhileStatement<'a>>),\n  EmptyStatement(oxc_allocator::Box<'a, EmptyStatement>),\n  ExpressionStatement(oxc_allocator::Box<'a, ExpressionStatement<'a>>),\n  ForInStatement(oxc_allocator::Box<'a, ForInStatement<'a>>),\n  ForOfStatement(oxc_allocator::Box<'a, ForOfStatement<'a>>),\n  ForStatement(oxc_allocator::Box<'a, ForStatement<'a>>),\n  IfStatement(oxc_allocator::Box<'a, IfStatement<'a>>),\n  LabeledStatement(oxc_allocator::Box<'a, LabeledStatement<'a>>),\n  ReturnStatement(oxc_allocator::Box<'a, ReturnStatement<'a>>),\n  SwitchStatement(oxc_allocator::Box<'a, SwitchStatement<'a>>),\n  ThrowStatement(oxc_allocator::Box<'a, ThrowStatement<'a>>),\n  TryStatement(oxc_allocator::Box<'a, TryStatement<'a>>),\n  WhileStatement(oxc_allocator::Box<'a, WhileStatement<'a>>),\n  WithStatement(oxc_allocator::Box<'a, WithStatement<'a>>),\n  VariableDeclaration(Box<'a, VariableDeclaration<'a>>),\n  FunctionDeclaration(Box<'a, Function<'a>>),\n  ClassDeclaration(Box<'a, Class<'a>>),\n  TSTypeAliasDeclaration(Box<'a, TSTypeAliasDeclaration<'a>>),\n  TSInterfaceDeclaration(Box<'a, TSInterfaceDeclaration<'a>>),\n  TSEnumDeclaration(Box<'a, TSEnumDeclaration<'a>>),\n  TSModuleDeclaration(Box<'a, TSModuleDeclaration<'a>>),\n  TSImportEqualsDeclaration(Box<'a, TSImportEqualsDeclaration<'a>>),\n  ImportDeclaration(Box<'a, ImportDeclaration<'a>>),\n  ExportAllDeclaration(Box<'a, ExportAllDeclaration<'a>>),\n  ExportDefaultDeclaration(Box<'a, ExportDefaultDeclaration<'a>>),\n  ExportNamedDeclaration(Box<'a, ExportNamedDeclaration<'a>>),\n  TSExportAssignment(Box<'a, TSExportAssignment<'a>>),\n  TSNamespaceExportDeclaration(Box<'a, TSNamespaceExportDeclaration<'a>>),\n}",
  "StaticBlock": "struct StaticBlock {\n  pub span: oxc_span::Span,\n  pub body: oxc_allocator::Vec<'a, Statement<'a>>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "StaticMemberExpression": "struct StaticMemberExpression {\n  pub span: oxc_span::Span,\n  pub object: Expression<'a>,\n  pub property: IdentifierName<'a>,\n  pub optional: bool,\n}",
  "StringLiteral": "struct StringLiteral {\n  pub span: oxc_span::Span,\n  pub value: oxc_span::Atom<'a>,\n  pub raw: Option<oxc_span::Atom<'a>>,\n  pub lone_surrogates: bool,\n}",
  "Super": "struct Super {\n  pub span: oxc_span::Span,\n}",
  "SwitchCase": "struct SwitchCase {\n  pub span: oxc_span::Span,\n  pub test: Option<Expression<'a>>,\n  pub consequent: oxc_allocator::Vec<'a, Statement<'a>>,\n}",
  "SwitchStatement": "struct SwitchStatement {\n  pub span: oxc_span::Span,\n  pub discriminant: Expression<'a>,\n  pub cases: oxc_allocator::Vec<'a, SwitchCase<'a>>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "TaggedTemplateExpression": "struct TaggedTemplateExpression {\n  pub span: oxc_span::Span,\n  pub tag: Expression<'a>,\n  pub type_arguments: Option<oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>>,\n  pub quasi: TemplateLiteral<'a>,\n}",
  "TemplateElement": "struct TemplateElement {\n  pub span: oxc_span::Span,\n  pub value: TemplateElementValue<'a>,\n  pub tail: bool,\n  pub lone_surrogates: bool,\n}",
  "TemplateElementValue": "struct TemplateElementValue {\n  pub raw: oxc_span::Atom<'a>,\n  pub cooked: Option<oxc_span::Atom<'a>>,\n}",
  "TemplateLiteral": "struct TemplateLiteral {\n  pub span: oxc_span::Span,\n  pub quasis: oxc_allocator::Vec<'a, TemplateElement<'a>>,\n  pub expressions: oxc_allocator::Vec<'a, Expression<'a>>,\n}",
  "ThisExpression": "struct ThisExpression {\n  pub span: oxc_span::Span,\n}",
  "ThrowStatement": "struct ThrowStatement {\n  pub span: oxc_span::Span,\n  pub argument: Expression<'a>,\n}",
  "TryStatement": "struct TryStatement {\n  pub span: oxc_span::Span,\n  pub block: oxc_allocator::Box<'a, BlockStatement<'a>>,\n  pub handler: Option<oxc_allocator::Box<'a, CatchClause<'a>>>,\n  pub finalizer: Option<oxc_allocator::Box<'a, BlockStatement<'a>>>,\n}",
  "TSAccessibility": "enum TSAccessibility {\n  Private,\n  Protected,\n  Public,\n}",
  "TSAnyKeyword": "struct TSAnyKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSArrayType": "struct TSArrayType {\n  pub span: oxc_span::Span,\n  pub element_type: TSType<'a>,\n}",
  "TSAsExpression": "struct TSAsExpression {\n  pub span: oxc_span::Span,\n  pub expression: Expression<'a>,\n  pub type_annotation: TSType<'a>,\n}",
  "TSBigIntKeyword": "struct TSBigIntKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSBooleanKeyword": "struct TSBooleanKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSCallSignatureDeclaration": "struct TSCallSignatureDeclaration {\n  pub span: oxc_span::Span,\n  pub type_parameters: Option<oxc_allocator::Box<'a, TSTypeParameterDeclaration<'a>>>,\n  pub this_param: Option<oxc_allocator::Box<'a, TSThisParameter<'a>>>,\n  pub params: oxc_allocator::Box<'a, FormalParameters<'a>>,\n  pub return_type: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n}",
  "TSClassImplements": "struct TSClassImplements {\n  pub span: oxc_span::Span,\n  pub expression: TSTypeName<'a>,\n  pub type_arguments: Option<oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>>,\n}",
  "TSConditionalType": "struct TSConditionalType {\n  pub span: oxc_span::Span,\n  pub check_type: TSType<'a>,\n  pub extends_type: TSType<'a>,\n  pub true_type: TSType<'a>,\n  pub false_type: TSType<'a>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "TSConstructorType": "struct TSConstructorType {\n  pub span: oxc_span::Span,\n  pub abstract: bool,\n  pub type_parameters: Option<oxc_allocator::Box<'a, TSTypeParameterDeclaration<'a>>>,\n  pub params: oxc_allocator::Box<'a, FormalParameters<'a>>,\n  pub return_type: oxc_allocator::Box<'a, TSTypeAnnotation<'a>>,\n}",
  "TSConstructSignatureDeclaration": "struct TSConstructSignatureDeclaration {\n  pub span: oxc_span::Span,\n  pub type_parameters: Option<oxc_allocator::Box<'a, TSTypeParameterDeclaration<'a>>>,\n  pub params: oxc_allocator::Box<'a, FormalParameters<'a>>,\n  pub return_type: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "TSEnumBody": "struct TSEnumBody {\n  pub span: oxc_span::Span,\n  pub members: oxc_allocator::Vec<'a, TSEnumMember<'a>>,\n}",
  "TSEnumDeclaration": "struct TSEnumDeclaration {\n  pub span: oxc_span::Span,\n  pub id: BindingIdentifier<'a>,\n  pub body: TSEnumBody<'a>,\n  pub const: bool,\n  pub declare: bool,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "TSEnumMember": "struct TSEnumMember {\n  pub span: oxc_span::Span,\n  pub id: TSEnumMemberName<'a>,\n  pub initializer: Option<Expression<'a>>,\n}",
  "TSEnumMemberName": "enum TSEnumMemberName {\n  Identifier(oxc_allocator::Box<'a, IdentifierName<'a>>),\n  String(oxc_allocator::Box<'a, StringLiteral<'a>>),\n  ComputedString(oxc_allocator::Box<'a, StringLiteral<'a>>),\n  ComputedTemplateString(oxc_allocator::Box<'a, TemplateLiteral<'a>>),\n}",
  "TSExportAssignment": "struct TSExportAssignment {\n  pub span: oxc_span::Span,\n  pub expression: Expression<'a>,\n}",
  "TSExternalModuleReference": "struct TSExternalModuleReference {\n  pub span: oxc_span::Span,\n  pub expression: StringLiteral<'a>,\n}",
  "TSFunctionType": "struct TSFunctionType {\n  pub span: oxc_span::Span,\n  pub type_parameters: Option<oxc_allocator::Box<'a, TSTypeParameterDeclaration<'a>>>,\n  pub this_param: Option<oxc_allocator::Box<'a, TSThisParameter<'a>>>,\n  pub params: oxc_allocator::Box<'a, FormalParameters<'a>>,\n  pub return_type: oxc_allocator::Box<'a, TSTypeAnnotation<'a>>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "TSImportEqualsDeclaration": "struct TSImportEqualsDeclaration {\n  pub span: oxc_span::Span,\n  pub id: BindingIdentifier<'a>,\n  pub module_reference: TSModuleReference<'a>,\n  pub import_kind: ImportOrExportKind,\n}",
  "TSImportType": "struct TSImportType {\n  pub span: oxc_span::Span,\n  pub argument: TSType<'a>,\n  pub options: Option<oxc_allocator::Box<'a, ObjectExpression<'a>>>,\n  pub qualifier: Option<TSTypeName<'a>>,\n  pub type_arguments: Option<oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>>,\n}",
  "TSIndexedAccessType": "struct TSIndexedAccessType {\n  pub span: oxc_span::Span,\n  pub object_type: TSType<'a>,\n  pub index_type: TSType<'a>,\n}",
  "TSIndexSignature": "struct TSIndexSignature {\n  pub span: oxc_span::Span,\n  pub parameters: oxc_allocator::Vec<'a, TSIndexSignatureName<'a>>,\n  pub type_annotation: oxc_allocator::Box<'a, TSTypeAnnotation<'a>>,\n  pub readonly: bool,\n  pub static: bool,\n}",
  "TSIndexSignatureName": "struct TSIndexSignatureName {\n  pub span: oxc_span::Span,\n  pub name: oxc_span::Atom<'a>,\n  pub type_annotation: oxc_allocator::Box<'a, TSTypeAnnotation<'a>>,\n}",
  "TSInferType": "struct TSInferType {\n  pub span: oxc_span::Span,\n  pub type_parameter: oxc_allocator::Box<'a, TSTypeParameter<'a>>,\n}",
  "TSInstantiationExpression": "struct TSInstantiationExpression {\n  pub span: oxc_span::Span,\n  pub expression: Expression<'a>,\n  pub type_arguments: oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>,\n}",
  "TSInterfaceBody": "struct TSInterfaceBody {\n  pub span: oxc_span::Span,\n  pub body: oxc_allocator::Vec<'a, TSSignature<'a>>,\n}",
  "TSInterfaceDeclaration": "struct TSInterfaceDeclaration {\n  pub span: oxc_span::Span,\n  pub id: BindingIdentifier<'a>,\n  pub type_parameters: Option<oxc_allocator::Box<'a, TSTypeParameterDeclaration<'a>>>,\n  pub extends: oxc_allocator::Vec<'a, TSInterfaceHeritage<'a>>,\n  pub body: oxc_allocator::Box<'a, TSInterfaceBody<'a>>,\n  pub declare: bool,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "TSInterfaceHeritage": "struct TSInterfaceHeritage {\n  pub span: oxc_span::Span,\n  pub expression: Expression<'a>,\n  pub type_arguments: Option<oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>>,\n}",
  "TSIntersectionType": "struct TSIntersectionType {\n  pub span: oxc_span::Span,\n  pub types: oxc_allocator::Vec<'a, TSType<'a>>,\n}",
  "TSIntrinsicKeyword": "struct TSIntrinsicKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSLiteral": "enum TSLiteral {\n  BooleanLiteral(oxc_allocator::Box<'a, BooleanLiteral>),\n  NumericLiteral(oxc_allocator::Box<'a, NumericLiteral<'a>>),\n  BigIntLiteral(oxc_allocator::Box<'a, BigIntLiteral<'a>>),\n  StringLiteral(oxc_allocator::Box<'a, StringLiteral<'a>>),\n  TemplateLiteral(oxc_allocator::Box<'a, TemplateLiteral<'a>>),\n  UnaryExpression(oxc_allocator::Box<'a, UnaryExpression<'a>>),\n}",
  "TSLiteralType": "struct TSLiteralType {\n  pub span: oxc_span::Span,\n  pub literal: TSLiteral<'a>,\n}",
  "TSMappedType": "struct TSMappedType {\n  pub span: oxc_span::Span,\n  pub type_parameter: oxc_allocator::Box<'a, TSTypeParameter<'a>>,\n  pub name_type: Option<TSType<'a>>,\n  pub type_annotation: Option<TSType<'a>>,\n  pub optional: Option<TSMappedTypeModifierOperator>,\n  pub readonly: Option<TSMappedTypeModifierOperator>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "TSMappedTypeModifierOperator": "enum TSMappedTypeModifierOperator {\n  True,\n  Plus,\n  Minus,\n}",
  "TSMethodSignature": "struct TSMethodSignature {\n  pub span: oxc_span::Span,\n  pub key: PropertyKey<'a>,\n  pub computed: bool,\n  pub optional: bool,\n  pub kind: TSMethodSignatureKind,\n  pub type_parameters: Option<oxc_allocator::Box<'a, TSTypeParameterDeclaration<'a>>>,\n  pub this_param: Option<oxc_allocator::Box<'a, TSThisParameter<'a>>>,\n  pub params: oxc_allocator::Box<'a, FormalParameters<'a>>,\n  pub return_type: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "TSMethodSignatureKind": "enum TSMethodSignatureKind {\n  Method,\n  Get,\n  Set,\n}",
  "TSModuleBlock": "struct TSModuleBlock {\n  pub span: oxc_span::Span,\n  pub directives: oxc_allocator::Vec<'a, Directive<'a>>,\n  pub body: oxc_allocator::Vec<'a, Statement<'a>>,\n}",
  "TSModuleDeclaration": "struct TSModuleDeclaration {\n  pub span: oxc_span::Span,\n  pub id: TSModuleDeclarationName<'a>,\n  pub body: Option<TSModuleDeclarationBody<'a>>,\n  pub kind: TSModuleDeclarationKind,\n  pub declare: bool,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "TSModuleDeclarationBody": "enum TSModuleDeclarationBody {\n  TSModuleDeclaration(oxc_allocator::Box<'a, TSModuleDeclaration<'a>>),\n  TSModuleBlock(oxc_allocator::Box<'a, TSModuleBlock<'a>>),\n}",
  "TSModuleDeclarationKind": "enum TSModuleDeclarationKind {\n  Global,\n  Module,\n  Namespace,\n}",
  "TSModuleDeclarationName": "enum TSModuleDeclarationName {\n  Identifier(BindingIdentifier<'a>),\n  StringLiteral(StringLiteral<'a>),\n}",
  "TSModuleReference": "enum TSModuleReference {\n  ExternalModuleReference(oxc_allocator::Box<'a, TSExternalModuleReference<'a>>),\n  IdentifierReference(Box<'a, IdentifierReference<'a>>),\n  QualifiedName(Box<'a, TSQualifiedName<'a>>),\n  ThisExpression(Box<'a, ThisExpression>),\n}",
  "TSNamedTupleMember": "struct TSNamedTupleMember {\n  pub span: oxc_span::Span,\n  pub label: IdentifierName<'a>,\n  pub element_type: TSTupleElement<'a>,\n  pub optional: bool,\n}",
  "TSNamespaceExportDeclaration": "struct TSNamespaceExportDeclaration {\n  pub span: oxc_span::Span,\n  pub id: IdentifierName<'a>,\n}",
  "TSNeverKeyword": "struct TSNeverKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSNonNullExpression": "struct TSNonNullExpression {\n  pub span: oxc_span::Span,\n  pub expression: Expression<'a>,\n}",
  "TSNullKeyword": "struct TSNullKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSNumberKeyword": "struct TSNumberKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSObjectKeyword": "struct TSObjectKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSOptionalType": "struct TSOptionalType {\n  pub span: oxc_span::Span,\n  pub type_annotation: TSType<'a>,\n}",
  "TSParenthesizedType": "struct TSParenthesizedType {\n  pub span: oxc_span::Span,\n  pub type_annotation: TSType<'a>,\n}",
  "TSPropertySignature": "struct TSPropertySignature {\n  pub span: oxc_span::Span,\n  pub computed: bool,\n  pub optional: bool,\n  pub readonly: bool,\n  pub key: PropertyKey<'a>,\n  pub type_annotation: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n}",
  "TSQualifiedName": "struct TSQualifiedName {\n  pub span: oxc_span::Span,\n  pub left: TSTypeName<'a>,\n  pub right: IdentifierName<'a>,\n}",
  "TSRestType": "struct TSRestType {\n  pub span: oxc_span::Span,\n  pub type_annotation: TSType<'a>,\n}",
  "TSSatisfiesExpression": "struct TSSatisfiesExpression {\n  pub span: oxc_span::Span,\n  pub expression: Expression<'a>,\n  pub type_annotation: TSType<'a>,\n}",
  "TSSignature": "enum TSSignature {\n  TSIndexSignature(oxc_allocator::Box<'a, TSIndexSignature<'a>>),\n  TSPropertySignature(oxc_allocator::Box<'a, TSPropertySignature<'a>>),\n  TSCallSignatureDeclaration(oxc_allocator::Box<'a, TSCallSignatureDeclaration<'a>>),\n  TSConstructSignatureDeclaration(oxc_allocator::Box<'a, TSConstructSignatureDeclaration<'a>>),\n  TSMethodSignature(oxc_allocator::Box<'a, TSMethodSignature<'a>>),\n}",
  "TSStringKeyword": "struct TSStringKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSSymbolKeyword": "struct TSSymbolKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSTemplateLiteralType": "struct TSTemplateLiteralType {\n  pub span: oxc_span::Span,\n  pub quasis: oxc_allocator::Vec<'a, TemplateElement<'a>>,\n  pub types: oxc_allocator::Vec<'a, TSType<'a>>,\n}",
  "TSThisParameter": "struct TSThisParameter {\n  pub span: oxc_span::Span,\n  pub this_span: oxc_span::Span,\n  pub type_annotation: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n}",
  "TSThisType": "struct TSThisType {\n  pub span: oxc_span::Span,\n}",
  "TSTupleElement": "enum TSTupleElement {\n  TSOptionalType(oxc_allocator::Box<'a, TSOptionalType<'a>>),\n  TSRestType(oxc_allocator::Box<'a, TSRestType<'a>>),\n  TSAnyKeyword(Box<'a, TSAnyKeyword>),\n  TSBigIntKeyword(Box<'a, TSBigIntKeyword>),\n  TSBooleanKeyword(Box<'a, TSBooleanKeyword>),\n  TSIntrinsicKeyword(Box<'a, TSIntrinsicKeyword>),\n  TSNeverKeyword(Box<'a, TSNeverKeyword>),\n  TSNullKeyword(Box<'a, TSNullKeyword>),\n  TSNumberKeyword(Box<'a, TSNumberKeyword>),\n  TSObjectKeyword(Box<'a, TSObjectKeyword>),\n  TSStringKeyword(Box<'a, TSStringKeyword>),\n  TSSymbolKeyword(Box<'a, TSSymbolKeyword>),\n  TSThisType(Box<'a, TSThisType>),\n  TSUndefinedKeyword(Box<'a, TSUndefinedKeyword>),\n  TSUnknownKeyword(Box<'a, TSUnknownKeyword>),\n  TSVoidKeyword(Box<'a, TSVoidKeyword>),\n  TSArrayType(Box<'a, TSArrayType<'a>>),\n  TSConditionalType(Box<'a, TSConditionalType<'a>>),\n  TSConstructorType(Box<'a, TSConstructorType<'a>>),\n  TSFunctionType(Box<'a, TSFunctionType<'a>>),\n  TSImportType(Box<'a, TSImportType<'a>>),\n  TSIndexedAccessType(Box<'a, TSIndexedAccessType<'a>>),\n  TSInferType(Box<'a, TSInferType<'a>>),\n  TSIntersectionType(Box<'a, TSIntersectionType<'a>>),\n  TSLiteralType(Box<'a, TSLiteralType<'a>>),\n  TSMappedType(Box<'a, TSMappedType<'a>>),\n  TSNamedTupleMember(Box<'a, TSNamedTupleMember<'a>>),\n  TSTemplateLiteralType(Box<'a, TSTemplateLiteralType<'a>>),\n  TSTupleType(Box<'a, TSTupleType<'a>>),\n  TSTypeLiteral(Box<'a, TSTypeLiteral<'a>>),\n  TSTypeOperatorType(Box<'a, TSTypeOperator<'a>>),\n  TSTypePredicate(Box<'a, TSTypePredicate<'a>>),\n  TSTypeQuery(Box<'a, TSTypeQuery<'a>>),\n  TSTypeReference(Box<'a, TSTypeReference<'a>>),\n  TSUnionType(Box<'a, TSUnionType<'a>>),\n  TSParenthesizedType(Box<'a, TSParenthesizedType<'a>>),\n  JSDocNullableType(Box<'a, JSDocNullableType<'a>>),\n  JSDocNonNullableType(Box<'a, JSDocNonNullableType<'a>>),\n  JSDocUnknownType(Box<'a, JSDocUnknownType>),\n}",
  "TSTupleType": "struct TSTupleType {\n  pub span: oxc_span::Span,\n  pub element_types: oxc_allocator::Vec<'a, TSTupleElement<'a>>,\n}",
  "TSType": "enum TSType {\n  TSAnyKeyword(oxc_allocator::Box<'a, TSAnyKeyword>),\n  TSBigIntKeyword(oxc_allocator::Box<'a, TSBigIntKeyword>),\n  TSBooleanKeyword(oxc_allocator::Box<'a, TSBooleanKeyword>),\n  TSIntrinsicKeyword(oxc_allocator::Box<'a, TSIntrinsicKeyword>),\n  TSNeverKeyword(oxc_allocator::Box<'a, TSNeverKeyword>),\n  TSNullKeyword(oxc_allocator::Box<'a, TSNullKeyword>),\n  TSNumberKeyword(oxc_allocator::Box<'a, TSNumberKeyword>),\n  TSObjectKeyword(oxc_allocator::Box<'a, TSObjectKeyword>),\n  TSStringKeyword(oxc_allocator::Box<'a, TSStringKeyword>),\n  TSSymbolKeyword(oxc_allocator::Box<'a, TSSymbolKeyword>),\n  TSUndefinedKeyword(oxc_allocator::Box<'a, TSUndefinedKeyword>),\n  TSUnknownKeyword(oxc_allocator::Box<'a, TSUnknownKeyword>),\n  TSVoidKeyword(oxc_allocator::Box<'a, TSVoidKeyword>),\n  TSArrayType(oxc_allocator::Box<'a, TSArrayType<'a>>),\n  TSConditionalType(oxc_allocator::Box<'a, TSConditionalType<'a>>),\n  TSConstructorType(oxc_allocator::Box<'a, TSConstructorType<'a>>),\n  TSFunctionType(oxc_allocator::Box<'a, TSFunctionType<'a>>),\n  TSImportType(oxc_allocator::Box<'a, TSImportType<'a>>),\n  TSIndexedAccessType(oxc_allocator::Box<'a, TSIndexedAccessType<'a>>),\n  TSInferType(oxc_allocator::Box<'a, TSInferType<'a>>),\n  TSIntersectionType(oxc_allocator::Box<'a, TSIntersectionType<'a>>),\n  TSLiteralType(oxc_allocator::Box<'a, TSLiteralType<'a>>),\n  TSMappedType(oxc_allocator::Box<'a, TSMappedType<'a>>),\n  TSNamedTupleMember(oxc_allocator::Box<'a, TSNamedTupleMember<'a>>),\n  TSTemplateLiteralType(oxc_allocator::Box<'a, TSTemplateLiteralType<'a>>),\n  TSThisType(oxc_allocator::Box<'a, TSThisType>),\n  TSTupleType(oxc_allocator::Box<'a, TSTupleType<'a>>),\n  TSTypeLiteral(oxc_allocator::Box<'a, TSTypeLiteral<'a>>),\n  TSTypeOperatorType(oxc_allocator::Box<'a, TSTypeOperator<'a>>),\n  TSTypePredicate(oxc_allocator::Box<'a, TSTypePredicate<'a>>),\n  TSTypeQuery(oxc_allocator::Box<'a, TSTypeQuery<'a>>),\n  TSTypeReference(oxc_allocator::Box<'a, TSTypeReference<'a>>),\n  TSUnionType(oxc_allocator::Box<'a, TSUnionType<'a>>),\n  TSParenthesizedType(oxc_allocator::Box<'a, TSParenthesizedType<'a>>),\n  JSDocNullableType(oxc_allocator::Box<'a, JSDocNullableType<'a>>),\n  JSDocNonNullableType(oxc_allocator::Box<'a, JSDocNonNullableType<'a>>),\n  JSDocUnknownType(oxc_allocator::Box<'a, JSDocUnknownType>),\n}",
  "TSTypeAliasDeclaration": "struct TSTypeAliasDeclaration {\n  pub span: oxc_span::Span,\n  pub id: BindingIdentifier<'a>,\n  pub type_parameters: Option<oxc_allocator::Box<'a, TSTypeParameterDeclaration<'a>>>,\n  pub type_annotation: TSType<'a>,\n  pub declare: bool,\n  pub scope_id: std::cell::Cell<Option<oxc_syntax::scope::ScopeId>>,\n}",
  "TSTypeAnnotation": "struct TSTypeAnnotation {\n  pub span: oxc_span::Span,\n  pub type_annotation: TSType<'a>,\n}",
  "TSTypeAssertion": "struct TSTypeAssertion {\n  pub span: oxc_span::Span,\n  pub type_annotation: TSType<'a>,\n  pub expression: Expression<'a>,\n}",
  "TSTypeLiteral": "struct TSTypeLiteral {\n  pub span: oxc_span::Span,\n  pub members: oxc_allocator::Vec<'a, TSSignature<'a>>,\n}",
  "TSTypeName": "enum TSTypeName {\n  IdentifierReference(oxc_allocator::Box<'a, IdentifierReference<'a>>),\n  QualifiedName(oxc_allocator::Box<'a, TSQualifiedName<'a>>),\n  ThisExpression(oxc_allocator::Box<'a, ThisExpression>),\n}",
  "TSTypeOperator": "struct TSTypeOperator {\n  pub span: oxc_span::Span,\n  pub operator: TSTypeOperatorOperator,\n  pub type_annotation: TSType<'a>,\n}",
  "TSTypeOperatorOperator": "enum TSTypeOperatorOperator {\n  Keyof,\n  Unique,\n  Readonly,\n}",
  "TSTypeParameter": "struct TSTypeParameter {\n  pub span: oxc_span::Span,\n  pub name: BindingIdentifier<'a>,\n  pub constraint: Option<TSType<'a>>,\n  pub default: Option<TSType<'a>>,\n  pub in: bool,\n  pub out: bool,\n  pub const: bool,\n}",
  "TSTypeParameterDeclaration": "struct TSTypeParameterDeclaration {\n  pub span: oxc_span::Span,\n  pub params: oxc_allocator::Vec<'a, TSTypeParameter<'a>>,\n}",
  "TSTypeParameterInstantiation": "struct TSTypeParameterInstantiation {\n  pub span: oxc_span::Span,\n  pub params: oxc_allocator::Vec<'a, TSType<'a>>,\n}",
  "TSTypePredicate": "struct TSTypePredicate {\n  pub span: oxc_span::Span,\n  pub parameter_name: TSTypePredicateName<'a>,\n  pub asserts: bool,\n  pub type_annotation: Option<oxc_allocator::Box<'a, TSTypeAnnotation<'a>>>,\n}",
  "TSTypePredicateName": "enum TSTypePredicateName {\n  Identifier(oxc_allocator::Box<'a, IdentifierName<'a>>),\n  This(TSThisType),\n}",
  "TSTypeQuery": "struct TSTypeQuery {\n  pub span: oxc_span::Span,\n  pub expr_name: TSTypeQueryExprName<'a>,\n  pub type_arguments: Option<oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>>,\n}",
  "TSTypeQueryExprName": "enum TSTypeQueryExprName {\n  TSImportType(oxc_allocator::Box<'a, TSImportType<'a>>),\n  IdentifierReference(Box<'a, IdentifierReference<'a>>),\n  QualifiedName(Box<'a, TSQualifiedName<'a>>),\n  ThisExpression(Box<'a, ThisExpression>),\n}",
  "TSTypeReference": "struct TSTypeReference {\n  pub span: oxc_span::Span,\n  pub type_name: TSTypeName<'a>,\n  pub type_arguments: Option<oxc_allocator::Box<'a, TSTypeParameterInstantiation<'a>>>,\n}",
  "TSUndefinedKeyword": "struct TSUndefinedKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSUnionType": "struct TSUnionType {\n  pub span: oxc_span::Span,\n  pub types: oxc_allocator::Vec<'a, TSType<'a>>,\n}",
  "TSUnknownKeyword": "struct TSUnknownKeyword {\n  pub span: oxc_span::Span,\n}",
  "TSVoidKeyword": "struct TSVoidKeyword {\n  pub span: oxc_span::Span,\n}",
  "UnaryExpression": "struct UnaryExpression {\n  pub span: oxc_span::Span,\n  pub operator: oxc_syntax::operator::UnaryOperator,\n  pub argument: Expression<'a>,\n}",
  "UpdateExpression": "struct UpdateExpression {\n  pub span: oxc_span::Span,\n  pub operator: oxc_syntax::operator::UpdateOperator,\n  pub prefix: bool,\n  pub argument: SimpleAssignmentTarget<'a>,\n}",
  "V8IntrinsicExpression": "struct V8IntrinsicExpression {\n  pub span: oxc_span::Span,\n  pub name: IdentifierName<'a>,\n  pub arguments: oxc_allocator::Vec<'a, Argument<'a>>,\n}",
  "VariableDeclaration": "struct VariableDeclaration {\n  pub span: oxc_span::Span,\n  pub kind: VariableDeclarationKind,\n  pub declarations: oxc_allocator::Vec<'a, VariableDeclarator<'a>>,\n  pub declare: bool,\n}",
  "VariableDeclarationKind": "enum VariableDeclarationKind {\n  Var,\n  Let,\n  Const,\n  Using,\n  AwaitUsing,\n}",
  "VariableDeclarator": "struct VariableDeclarator {\n  pub span: oxc_span::Span,\n  pub kind: VariableDeclarationKind,\n  pub id: BindingPattern<'a>,\n  pub init: Option<Expression<'a>>,\n  pub definite: bool,\n}",
  "WhileStatement": "struct WhileStatement {\n  pub span: oxc_span::Span,\n  pub test: Expression<'a>,\n  pub body: Statement<'a>,\n}",
  "WithClause": "struct WithClause {\n  pub span: oxc_span::Span,\n  pub attributes_keyword: IdentifierName<'a>,\n  pub with_entries: oxc_allocator::Vec<'a, ImportAttribute<'a>>,\n}",
  "WithStatement": "struct WithStatement {\n  pub span: oxc_span::Span,\n  pub object: Expression<'a>,\n  pub body: Statement<'a>,\n}",
  "YieldExpression": "struct YieldExpression {\n  pub span: oxc_span::Span,\n  pub delegate: bool,\n  pub argument: Option<Expression<'a>>,\n}"
}
